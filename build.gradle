plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '1.0.0'
    id 'org.hidetake.ssh' version '2.9.0'
}

group = 'com.dnd.jachwirus'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'mysql:mysql-connector-java'
    compile('org.projectlombok:lombok')
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws'

    /* swagger */
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

    //Querydsl JPA Support
    compile('com.querydsl:querydsl-jpa:4.2.2')
    //Querydsl APT Support = 쿼리 타입 (Q) 을 생성할 때 필요한 라이브러리
    compile('com.querydsl:querydsl-apt:4.2.2')
}


// AWS S3 때메 추가함
dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-aws:2.2.1.RELEASE'
    }
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'src/main/generated'
        }
    }
}


task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    file(new File(projectDir, "/src/main/generated")).deleteDir()
    file(new File(projectDir, "/src/main/generated")).mkdirs()
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.compileOnly
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = file('src/main/generated')
}

compileJava {
    dependsOn generateQueryDSL
}

clean.doLast {
    file(new File(projectDir, "/src/main/generated")).deleteDir()
}

// 실행방법
// gradlew clean bootWar jibDockerBuild dockerLocalRun --stacktrace
task dockerLocalRun(){
    doLast{
        def imageName = "${project.name}:${project.version}"
        def containerName = "write"
        println('\n도커 빌드 완료1')
        exec{ commandLine "docker stop ${containerName}".split(' ') }
        exec{ commandLine "docker rm ${containerName}".split(' ') }
        exec{ commandLine "docker run -d -p 80:9010 --name ${containerName} ${imageName}".split(' ') }

        println('\n도커 빌드 완료')
    }
}
remotes {
    test {
        host =  project.properties["dockerHost"]
        user =  project.properties["dockerUser"]
        identity = file(project.properties["dockerKeyPath"])
        knownHosts = allowAnyHosts
    }
}

//실행방법
//gradlew clean bootWar jibBuildTar dockerTestRun --stacktrace
task dockerTestRun{
    doLast{
        ssh.run {
            session(remotes.test) {
                def command
                def imageName = "${project.name}:${project.version}"
                def containerName = 'write'
                def host = project.properties["dockerHost"]
                def buildPath = fileTree(dir: 'build').getDir()
                def tarName = "jib-image.tar"
                def inPort = project.properties["dockerInPort"]
                def outPort = project.properties["dockerOutPort"]
                def routePort = project.properties["dockerOutPort"]
                def from = "${buildPath}/${tarName}"
                def to = project.properties["dockerDir"]

                command = 'docker version'
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "ls ${to}"
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "rm ${to}${tarName}"
                println "\n\$ ${command}"
                execute(command, ignoreError:true){r->println r}

                println "\n\$ put from:${from}, into: ${to}"
                put from: from, into: to

                command = 'ls'
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "docker stop ${containerName}"
                println "\n\$ ${command}"
                execute(command, ignoreError:true){r->println r}

                command = "docker rm ${containerName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker rmi ${imageName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker load --input ${to}${tarName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker images"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker run -d -p ${inPort}:${outPort} --name=${containerName} ${imageName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker ps"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                println('\n도커 업로드 완료')
                println("\nhttp://${host}:${routePort}/ 에 접속하세요.")
            }
        }
    }
}
